{% load static %}
<ul class="nav justify-content-end sticky-lg-bottom">
	<li class="nav-item">
		<button type="button" class="btn btn-primary btn-lg" data-bs-toggle="offcanvas" data-bs-target="#offcanvasChat" aria-controls="offcanvasChat">Open chat</button>
	</li>
</ul>

<div class="bg-light offcanvas offcanvas-start" data-bs-scroll="true" data-bs-backdrop="false" tabindex="-1" id="offcanvasChat" aria-labelledby="offcanvasScrollingLabel">
	<div class="offcanvas-header pb-0 m-1 mb-0">
		<ul class="nav nav-tabs" id="chatTabs" role="tablist">
			<li class="nav-item" role="presentation">
				<button class="nav-link active" id="general-chat-tab" data-bs-toggle="tab" data-bs-target="#general-chat" type="button" role="tab" aria-controls="general-chat" aria-selected="true">General chat</button>
			</li>
			<li class="nav-item" role="presentation">
				<button class="nav-link" id="direct-messages-tab" data-bs-toggle="tab" data-bs-target="#direct-messages" type="button" role="tab" aria-controls="direct-messages" aria-selected="false">Direct messages</button>
			</li>
		</ul>
		<button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
	</div>
	<div id="body-scroll" class="offcanvas-body d-flex flex-column">
		<div class="tab-content flex-grow-1" id="chatTabsContent">
			<div class="tab-pane show active" id="general-chat" role="tabpanel" aria-labelledby="general-chat-tab" style="height: 100%;">
				<div id="scroll-thing" class="card m-1 flex-grow-1" style="height: 100%; overflow: auto;">
					<div id="chat-messages" class="card-body d-flex flex-column">
						<!-- General chat messages will be loaded here -->
					</div>
				</div>
			</div>
			<div class="tab-pane" id="direct-messages" role="tabpanel" aria-labelledby="direct-messages-tab" style="height: 100%;">
				<div id="scroll-thing-dm" class="card m-1 flex-grow-1" style="height: 100%; overflow: auto;">
					<div class="card-header">
                        <select id="friends-dropdown" class="form-select">
                            <option selected>Select a friend</option>
                            <!-- Friends will be populated here -->
                        </select>
                    </div>
					<div id="dm-messages" class="card-body d-flex flex-column">
						<!-- Direct messages will be loaded here -->
					</div>
				</div>
			</div>
		</div>
	</div>
	<div class="offcanvas-footer text-muted d-flex justify-content-start align-items-center p-3">
		<input type="text" class="form-control form-control-lg m-1" id="chat-message-input" placeholder="Type message">
		<button id="chat-message-submit" type="button" class="btn btn-info mx-1 py-2">Send</button>
	</div>
</div>

{{ user.username|json_script:"json-username" }}
{{ user.avatar.url|json_script:"json-avatar" }}

<script type="module" src="{% static 'front/handle_chat.js' %}"></script>







let lastUsername = null;
let lastTime = null;
const newMessageTime = 10000;
const genChatRoomName = 'general_chat';
const userName = JSON.parse(document.getElementById('json-username').textContent);
const userAvatar = JSON.parse(document.getElementById('json-avatar').textContent);
console.log(userAvatar);

const genChatSocket = new WebSocket(
	'wss://'
	+ window.location.host
	+ '/ws/chat/'
	+ genChatRoomName
	+ '/'
);
let privateChatSocket;

// scrolls to the bottom when messages overflow
function scrollToBottom() {
	let objDiv = document.getElementById("body-scroll");
	objDiv.scrollTop = objDiv.scrollHeight;
}

/** 
 * Get the active tab, either 'general-chat-tab' or 'direct-messages-tab'
*/
function getActiveTab() {
	const activeTab = document.querySelector('#chatTabs .nav-link.active');
	if (activeTab) {
		return activeTab.getAttribute('id');
	}
	return null;
}

/**
 * Adds a new message to the HTML
 * It checks the previous message, its user and the time it was posted,
 * to format correctly
 */
function addMessage(data, userAvatar, contentMessage, dbTime = null, timeDiff = null) {
	const currTime = new Date();
	const chatMessages = document.getElementById('chat-messages');

	/*	If the previous message wasn't sent by the same user, or was sent long enough ago,
		the message is considered a "first message", and will have the username and avatar
		of the sender attached to it.
	*/
	if (lastUsername !== data.username || currTime - lastTime > newMessageTime || (timeDiff && timeDiff > newMessageTime / 1000)) {
		const messageContainer = document.createElement('div');
		messageContainer.setAttribute("id", "first-message");
		messageContainer.className = 'd-flex align-items-start me-1';

		const profilePic = document.createElement('img');
		profilePic.src = userAvatar;
		profilePic.alt = 'Profile Picture';
		profilePic.className = 'rounded-circle me-3 ms-1 mt-1';
		profilePic.style.width = '40px';
		profilePic.style.height = '40px';

		const messageContent = document.createElement('div');
		messageContent.className = 'flex-grow-1';
		messageContent.setAttribute('style', 'overflow: auto;');

		const username = document.createElement('b');
		username.className = 'text-primary';
		username.innerText = data.username;

		const timestamp = document.createElement('small');
		timestamp.className = 'text-muted pe-1';
		if (dbTime) {
			timestamp.innerText = dbTime.substr(dbTime.indexOf("T") + 1, 5);
		} else {
			let hours = currTime.getHours();
			if (hours < 10) {
				hours = "0" + hours;
			}
			let minutes = currTime.getMinutes();
			if (minutes < 10) {
				minutes = "0" + minutes;
			}
			timestamp.innerText = hours + ":" + minutes;
		}

		const header = document.createElement('div');
		header.className = 'd-flex justify-content-between';
		header.appendChild(username);
		header.appendChild(timestamp);

		const messageText = document.createElement('div');
		messageText.setAttribute('style', 'white-space: pre-wrap; word-wrap: break-word; word-break: break-word;');
		messageText.innerText = contentMessage;

		messageContent.appendChild(header);
		messageContent.appendChild(messageText);
		messageContainer.appendChild(profilePic);
		messageContainer.appendChild(messageContent);
		chatMessages.appendChild(messageContainer);
	} else {
		const messageContent = document.createElement('div');
		messageContent.className = 'd-flex me-1';
		messageContent.setAttribute("id", "message-content");
		messageContent.setAttribute('style', 'overflow: auto;');

		const timestamp = document.createElement('small');
		timestamp.setAttribute('id', 'timestamp');
		timestamp.className = 'text-muted me-3 pt-1 ps-1';
		if (dbTime) {
			timestamp.innerText = dbTime.substr(dbTime.indexOf("T") + 1, 5);
		} else {
			let hours = currTime.getHours();
			if (hours < 10) {
				hours = "0" + hours;
			}
			let minutes = currTime.getMinutes();
			if (minutes < 10) {
				minutes = "0" + minutes;
			}
			timestamp.innerText = hours + ":" + minutes;
		}

		const messageText = document.createElement('div');
		messageText.setAttribute('style', 'white-space: pre-wrap; word-wrap: break-word; word-break: break-word;');
		messageText.innerText = contentMessage;

		messageContent.appendChild(timestamp);
		messageContent.appendChild(messageText);
		chatMessages.appendChild(messageContent);
	}

	lastUsername = data.username;
	lastTime = currTime;
}

/**
 * Fetches the messages stored in the database by using an API, then calls addMessage() for each of them
 */
function fetchMessages(url = '/chat/api/messages/') {
	//let lastMessageTimeFromDB = null;
	fetch(url)
		.then(response => response.json())
		.then(data => {
			//console.log('Raw response text:', text);  // Log the raw response text
			//const data = JSON.parse(text);  // Parse the text as JSON
			console.log(data);
			data.results.forEach(message => {
				addMessage(message, userAvatar, message.content, message.date_added, message.time_diff);
			//	lastMessageTimeFromDB = message.date_added;
			});
			scrollToBottom();
			if (data.next) {
				let nextUrl = data.next;
				fetchMessages(nextUrl.replace('http://localhost', ''));
			}
		})
		.catch(error => console.error('Error fetching messages:', error));
}

//--- General Chat Socket Setup ---//

genChatSocket.onmessage = function(e) {
	const data = JSON.parse(e.data);
	if (data.message) {
		addMessage(data, userAvatar, data.message);
		scrollToBottom();
	}
};

genChatSocket.onclose = function(e) {
	console.log('General chat socket DISCONNECTED');
};

//--- Private Chat Socket Setup ---//

function setupPrivateChatSocket(username) {
	privateChatSocket = new WebSocket(
		'wss://'
		+ window.location.host
		+ '/ws/private-chat/'
		+ username
		+ '/'
	);

	privateChatSocket.onmessage = function(e) {
		const data = JSON.parse(e.data);
		if (data.message) {
			addMessage(data, userAvatar, data.message);
			scrollToBottom();
		}
	};

	privateChatSocket.onclose = function(e) {
		console.log('Private chat socket DISCONNECTED');
	};
}

function genChatSubmit() {
	document.querySelector('#chat-message-input').focus();
	document.querySelector('#chat-message-input').onkeyup = function(e) {
		if (e.keyCode === 13) {  // enter, return
			document.querySelector('#chat-message-submit').click();
		}
	};

	document.querySelector('#chat-message-submit').onclick = function(e) {
		const messageInputDom = document.querySelector('#chat-message-input');
		const message = messageInputDom.value;
		if (message.trim())
			genChatSocket.send(JSON.stringify({
				'message': message,
				'username': userName,
				'room': genChatRoomName
			}));
		messageInputDom.value = '';
	};
}

function privChatSubmit() {
	document.querySelector('#chat-message-input').focus();
	document.querySelector('#chat-message-input').onkeyup = function(e) {
		if (e.keyCode === 13) {  // enter, return
			document.querySelector('#chat-message-submit').click();
		}
	};
	
	document.querySelector('#chat-message-submit').onclick = function(e) {
		const messageInputDom = document.querySelector('#chat-message-input');
		const message = messageInputDom.value;
		if (message.trim())
			privateChatSocket.send(JSON.stringify({
				'message': message,
				'username': userName
			}));
		messageInputDom.value = '';
	};
}

document.addEventListener('DOMContentLoaded', function() {
	genChatSubmit();
	
	const chatTabs = document.getElementById('chatTabs');
	chatTabs.addEventListener('shown.bs.tab', function(event) {
		const activeTab = event.target; // The newly activated tab
		const activeTabId = activeTab.getAttribute('id');
		console.log('Active tab:', activeTabId);
		if (activeTabId === 'direct-messages-tab') {
			const friendsDropdown = document.getElementById('friends-dropdown');
            friendsDropdown.addEventListener('change', function() {
                const selectedFriend = friendsDropdown.value;
                console.log('Selected friend:', selectedFriend);
                setupPrivateChatSocket(selectedFriend);
                privChatSubmit();
            });
		} else {
			if (privateChatSocket && privateChatSocket.readyState === WebSocket.OPEN) {
                privateChatSocket.close();
            }
			genChatSubmit();
		}
	});
});

// Initial load of messages
fetchMessages();




					<div class="card-header">
                        <select id="friends-dropdown" class="form-select">
                            <option selected>Select a friend</option>
                            <!-- Friends will be populated here -->
                        </select>
                    </div>
					<div id="dm-messages" class="card-body d-flex flex-column">
						<!-- Direct messages will be loaded here -->
					</div>




{% load static %}
<ul class="nav justify-content-end sticky-lg-bottom bg-dark">
	<li class="nav-item">
		{% if user.is_authenticated %}
		<button type="button" class="btn btn-primary btn-lg m-2" data-bs-toggle="offcanvas" data-bs-target="#offcanvasChat" aria-controls="offcanvasChat">Open chat</button>
		{% else %}
		<button type="button" class="btn btn-primary btn-lg m-2" disabled>Open chat</button>
		{% endif %}
	</li>
</ul>

{% if user.is_authenticated %}
<div class="bg-light offcanvas offcanvas-start" data-bs-scroll="true" data-bs-backdrop="false" tabindex="-1" id="offcanvasChat" aria-labelledby="offcanvasScrollingLabel">
	<div class="offcanvas-header pb-0 m-1 mb-0">
		<ul class="nav nav-tabs" id="chatTabs" role="tablist">
			<li class="nav-item" role="presentation">
				<button class="nav-link active" id="general-chat-tab" data-bs-toggle="tab" data-bs-target="#general-chat" type="button" role="tab" aria-controls="general-chat" aria-selected="true">General chat</button>
			</li>
			<li class="nav-item" role="presentation">
				<button class="nav-link" id="direct-messages-tab" data-bs-toggle="tab" data-bs-target="#direct-messages" type="button" role="tab" aria-controls="direct-messages" aria-selected="false">Direct messages</button>
			</li>
		</ul>
		<button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
	</div>
	<div id="body-scroll" class="offcanvas-body d-flex flex-column">
		<div class="tab-content flex-grow-1" id="chatTabsContent" style="height: 100%;">
			<div class="tab-pane show active" id="general-chat" role="tabpanel" aria-labelledby="general-chat-tab" style="height: 100%;">
				<div id="scroll-thing" class="card m-1 flex-grow-1" style="height: 100%; overflow: auto;">
					<div id="chat-messages" class="card-body d-flex flex-column">
						<!-- General chat messages will be loaded here -->
					</div>
				</div>
			</div>
			<div class="tab-pane" id="direct-messages" role="tabpanel" aria-labelledby="direct-messages-tab" style="height: 100%;">
				<div id="scroll-thing-dm" class="card m-1 flex-grow-1" style="height: 100%; overflow: auto;">
					<div class="card-header d-flex justify-content-between align-items-center sticky-top" style="background-color: #a3e7f5;">
						<select id="friends-dropdown" class="form-select">
							<option selected>Select a friend</option>
							<!-- Friends will be populated here -->
						</select>
					</div>
					<div id="dm-messages" class="card-body d-flex flex-column">
						<!-- Direct messages will be loaded here -->
					</div>
				</div>
			</div>
		</div>
	</div>
	<div class="offcanvas-footer text-muted d-flex justify-content-start align-items-center p-3">
		<input type="text" class="form-control form-control-lg m-1" id="chat-message-input" placeholder="Type message">
		<button id="chat-message-submit" type="button" class="btn btn-info mx-1 py-2">Send</button>
	</div>
</div>

<script type="module" src="{% static 'front/handle_chat.js' %}"></script>
{% endif %}